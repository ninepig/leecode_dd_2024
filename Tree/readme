树」具有以下的特点：

有且仅有一个节点没有前驱节点，该节点被称为树的 「根节点（Root）」 。
除了根节点以之，每个节点有且仅有一个直接前驱节点。
包括根节点在内，每个节点可以有多个后继节点。
其中每一个集合本身又是一棵树，并且被称为根的 「子树（SubTree）」。


「树的节点」 由一个数据元素和若干个指向其子树的树的分支组成。而节点所含有的子树个数称为 「节点的度」。度为 0
 的节点称为 「叶子节点」 或者 「终端节点」，度不为  0
 的节点称为 「分支节点」 或者 「非终端节点」。树中各节点的最大度数称为 「树的度」


 「节点的层次」 是从根节点开始定义，将根节点作为第 1 层，根的孩子节点作为第 2 层，以此类推，如果某个节点在第 i 层，
 则其孩子节点在第 i + 1 层。而父亲节点在同一层的节点互为 「堂兄弟节点」。树中所有节点最大的层数称为 「树的深度」 或 「树的高度」。
 树中，两个节点之间所经过节点序列称为 「路径」，两个节点之间路径上经过的边数称为 「路径长度」。

 路径：树中两个节点之间所经过的节点序列。例如图中 E 到 G 的路径为 E - B - A - D - G

 满二叉树
叶子节点只出现在最下面一层。
非叶子节点的度一定为 2
在同等深度的二叉树中，满二叉树的节点个数最多，叶子节点个数最多。
如果我们对满二叉树的节点进行编号，根结点编号为
，然后按照层次依次向下，每一层从左至右的顺序进行编号。则深度为
 的满二叉树最后一个节点的编号为 2^k -1
 也就是 第一层1 第二层2 第三层4 第四层 8

 完全二叉树
 叶子节点只能出现在最下面两层。
最下层的叶子节点一定集中在该层最左边的位置上。
倒数第二层如果有叶子节点，则该层的叶子节点一定集中在右边的位置上。
如果节点的度为 1，则该节点只偶遇左孩子节点，即不存在只有右子树的情况。
同等节点数的二叉树中，完全二叉树的深度最小

第一层1 第二层2 第三层4 ..最后一层 子节点只在左侧

BST
如果任意节点的左子树不为空，则左子树上所有节点的值均小于它的根节点的值。
如果任意节点的右子树不为空，则右子树上所有节点的值均大于它的根节点的值。
任意节点的左子树、右子树均为二叉搜索树
BST--->中序--->sorted order

BBT
平衡二叉搜索树（Balanced Binary Tree）：一种结构平衡的二叉搜索树。即叶节点高度差的绝对值不超过
，并且左右两个子树都是一棵平衡二叉搜索树。平衡二叉树可以在
 内完成插入、查找和删除操作。最早被发明的平衡二叉搜索树为 「AVL 树（Adelson-Velsky and Landis Tree））」。



 ##
 任何树的题目都可以分为各种形式的遍历 加逻辑处理
 比如 处理当前节点逻辑: 前序处理
 需要计算左右叶子:后序
 排序+bst : 中序

 单反是所有可能性 : 回溯法


TODO :
三个order 的stack做法要了然于胸
bst ---> dlist 好题

竖着操作的树的题 要看下