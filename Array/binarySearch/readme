二分法

看题思路
看到lgn 的时间 只有二分法

2种思路

1 在循环之中找出答案 退出

2 循环之中是缩小范围
--》判断依据 left < right ---》 用这种判断的话 结尾要加上 return left if num[left] == target else -1

如果判断语句为 left <= right，且查找的元素不存在，则 while 判断语句出界条件是 left == right + 1，写成区间形式就是 [right + 1, right]，
此时待查找区间为空，待查找区间中没有元素存在，所以此时终止循环可以直接返回 -1 是正确的。
比如说区间 [3, 2]，不可能存在一个元素既大于等于 3 又小于等于 2，此时直接终止循环，返回 -1 即可。
如果判断语句为left < right，且查找的元素不存在，则 while 判断语句出界条件是 left == right，写成区间形式就是 [right, right]。
此时区间不为空，待查找区间还有一个元素存在，并不能确定查找的元素不在这个区间中，此时终止循环返回 -1 是错误的。
比如说区间 [2, 2]，元素 2 就属于这个区间，此时终止循环，返回 -1 就漏掉了这个元素。


二分法
3个要素

4.1 区间的开闭问题 #
区间的左闭右闭、左闭右开指的是初始待查找区间的范围。

左闭右闭：初始化赋值时，left = 0，right = len(nums) - 1，left 为数组第一个元素位置，right 为数组最后一个元素位置，从而区间 [left, right] 左右边界上的点都能取到。
左闭右开：初始化赋值时，left = 0，right = len(nums)，left 为数组第一个元素位置，right 为数组最后一个元素的下一个位置，从而区间 [left, right) 左边界点能取到，而右边界上的点不能取到。
关于区间的左闭右闭、左闭右开，其实在网上都有对应的代码和解法。但是相对来说，左闭右开这种写法在解决问题的过程中，需要考虑的情况更加复杂，所以建议 全部使用「左闭右闭」区间。

4.2 mid 的取值问题 #
在二分查找的实际问题中，最常见的 mid 取值就是 mid = (left + right) // 2 或者 mid = left + (right - left) // 2 。前者是最常见写法，后者是为了防止整型溢出。式子中 // 2 就代表的含义是中间数「向下取整」。当待查找区间中有偶数个元素个数时，则位于最中间的数为 2 个，这时候使用上面式子只能取到中间靠左边那个数，而取不到中间靠右边的那个数。那么，右边的那个数到底能取吗？

其实，右边的数也是可以取的，令 mid = (left + right + 1) // 2，或者 mid = left + (right - left + 1) // 2。这样如果待查找区间的元素为偶数个，就能取到中间靠右边的那个数了，把这个式子代入到 704. 二分查找 中试一试，发现也是能通过题目评测的。

这是因为二分查找的思路是根据每次选择中间位置上的数值来决定下一次在哪个区间查找元素。每一次选择的元素位置可以是中间位置，但并不是一定非得是区间中间位置元素，靠左一些、靠右一些、甚至区间三分之一、五分之一处等等，都是可以的。比如说 mid = left + (right - left + 1) * 1 // 5 也是可以的。

但一般来说，取中间位置元素在平均意义下所达到的效果最好。同时这样写最简单。而对于 mid 值是向下取整还是向上取整，大多数时候是选择不加 1。但有些写法中，是需要考虑加 1 的，后面会讲解这种写法。

4.3 出界条件的判断 #
我们经常看到二分查找算法的写法中，while 语句出界判断的语句有left <= right 和 left < right 两种写法。那我们究竟应该在什么情况用什么写法呢？

这就需要判断一下导致 while 语句出界的条件是什么。

如果判断语句为 left <= right，且查找的元素不存在，则 while 判断语句出界条件是 left == right + 1，写成区间形式就是 [right + 1, right]，此时待查找区间为空，待查找区间中没有元素存在，所以此时终止循环可以直接返回 -1 是正确的。
比如说区间 [3, 2]，不可能存在一个元素既大于等于 3 又小于等于 2，此时直接终止循环，返回 -1 即可。
如果判断语句为left < right，且查找的元素不存在，则 while 判断语句出界条件是 left == right，写成区间形式就是 [right, right]。此时区间不为空，待查找区间还有一个元素存在，并不能确定查找的元素不在这个区间中，此时终止循环返回 -1 是错误的。
比如说区间 [2, 2]，元素 2 就属于这个区间，此时终止循环，返回 -1 就漏掉了这个元素。
但是如果我们还是想要使用 left < right 的话，怎么办？

可以在返回的时候需要增加一层判断，判断 left 所指向位置是否等于目标元素，如果是的话就返回 left，如果不是的话返回 -1

missed qustioon
4 median of two sorted array
270 binary tree （no tree learned yet）
349/350 not binary search
259 not binary search  two pointer
