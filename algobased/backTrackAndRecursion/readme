https://github.com/itcharge/LeetCode-Py/blob/main/Contents/09.Algorithm-Base/04.Backtracking-Algorithm/01.Backtracking-Algorithm.md
按顺序枚举每一位上可能出现的数字，之前已经出现的数字在接下来要选择的数字中不能再次出现。
对于每一位，进行如下几步：
选择元素：从可选元素列表中选择一个之前没有出现过的元素。
递归搜索：从选择的元素出发，一层层地递归搜索剩下位数，直到遇到边界条件时，不再向下搜索。
撤销选择：一层层地撤销之前选择的元素，转而进行另一个分支的搜索。直到完全遍历完所有可能的路径。
讲的特别好

res = []    # 存放所欲符合条件结果的集合
path = []   # 存放当前符合条件的结果
def backtracking(nums):             # nums 为选择元素列表
    if 遇到边界条件:                  # 说明找到了一组符合条件的结果
        res.append(path[:])         # 将当前符合条件的结果放入集合中
        return

    for i in range(len(nums)):      # 枚举可选元素列表
        path.append(nums[i])        # 选择元素
        backtracking(nums)          # 递归搜索
        path.pop()                  # 撤销选择

backtracking(nums)

https://www.cnblogs.com/sjjghsf/p/13751982.html

回溯法一个关于撤销操作的解释
for....
 List<Integer> subList = new LinkedList<>(list);
subList.add(i);
//递归
dfs(res, subList, k, i + 1, n - i);
//注意这里没有撤销的操作，因为是在一个新的list中的修改，原来的list并没有修改，
//所以不需要撤销操作

类似 22、 17 因为用的new string

我们看到最后并没有撤销的操作，这是因为每个分支都是一个新的list，你对当前分支的修改并不会影响到其他分支，所以并不需要撤销操作。

注意：大家尽量不要写这样的代码，这种方式虽然也能解决，但每个分支都会重新创建list，效率很差。

## wenjing
一般对于 list[list[int]] 这样的返回值都会进行撤销操作， 因为不会新开一个变量。。消耗过大

对于要计算combination 。。。 sum 这种操作 需要排序 用来避免过度循环，提早结束循环
对于需要去重，也需要排序来做 方便去重 num[i - 1 ] == num[i]
