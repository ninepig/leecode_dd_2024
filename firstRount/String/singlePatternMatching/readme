在字符串问题中，最重要的问题之一就是字符串匹配问题。
而按照模式串的个数，我们可以将字符串匹配问题分为：「单模式串匹配问题」和「多模式串匹配问题」

1 bf 暴力算法
  一个一个比较..  会出现回溯 效率较低下
  def bruteForce(T: str, p: str) -> int:
    n, m = len(T), len(p)

    i, j = 0, 0                     # i 表示文本串 T 的当前位置，j 表示模式串 p 的当前位置
    while i < n and j < m:          # i 或 j 其中一个到达尾部时停止搜索
        if T[i] == p[j]:            # 如果相等，则继续进行下一个字符匹配
            i += 1
            j += 1
        else:
            i = i - (j - 1)         # 如果匹配失败则将 i 移动到上次匹配开始位置的下一个位置
            j = 0                   # 匹配失败 j 回退到模式串开始位置

    if j == m:
        return i - j                # 匹配成功，返回匹配的开始位置
    else:
        return -1                   # 匹配失败，返回 -1

总的比较次数为 m * (n - m + 1) 。所以 BF 算法的最坏时间复杂度为  o(m*n)

在最理想的情况下（第一次匹配直接匹配成功），BF 算法的最佳时间复杂度是 o(m) 。

2 RK 算法
对于给定的文本串 T 与模式串 p，求出文本串 T 的长度为 n，模式串 p 的长度为 m。
通过滚动哈希算法求出模式串 p 的哈希值 hash_p。
再通过滚动哈希算法对文本串 T 中 n - m + 1 个子串分别求哈希值 hash_t。
然后逐个与模式串的哈希值比较大小。
如果当前子串的哈希值 hash_t 与模式串的哈希值 hash_p 不同，则说明两者不匹配，则继续向后匹配。
如果当前子串的哈希值 hash_t 与模式串的哈希值 hash_p 相等，则验证当前子串和模式串的每个字符是否真的相等（避免哈希冲突）。
如果当前子串和模式串的每个字符相等，则说明当前子串和模式串匹配。
如果当前子串和模式串的每个字符不相等，则说明两者不匹配，继续向后匹配。
比较到末尾，如果仍未成功匹配，则说明文本串 T 中不包含模式串 p，方法返回 -1。

3 kmp 算法
看半天没看懂...等面经把
   1 前缀数组的构建
   2 比较过程

4 bm 算法

5 string sunday

6 string horspool


rk + kmp 会用到



leetcode之中出现的大部分题
包括 rotate // contain repeated string
一个关键的概念

If we have a string that is periodic (i.e. is made up of strings that are the same and repeat R times),
then we can check if the string is equal to some rotation of itself, and if it is, then we know that the string is periodic.
Checking if S is a sub-string of (S+S)[1:-1] basically checks if the string is present in a rotation of itself for all values of R such that 0 < R < len(S)

但几乎所有的题都可以由kmp解决
kmp需要学习下

bf的算法 时间复杂度 o(n*m)
kmp算法 时间复杂度最差o(n+m)

TODO 2156 RK 算法